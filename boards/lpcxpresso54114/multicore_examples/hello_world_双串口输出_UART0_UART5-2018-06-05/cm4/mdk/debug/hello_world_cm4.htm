<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [debug\hello_world_cm4.out]</title></head>
<body><HR>
<H1>Static Call Graph for image debug\hello_world_cm4.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat Jul 07 12:40:13 2018
<BR><P>
<H3>Maximum Stack Usage =       1356 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
task_sec &rArr; auto_report_sec_task &rArr; send_fixed_len_count &rArr; send_to_only_gateway &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[35]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">NMI_Handler</a><BR>
 <LI><a href="#[36]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">HardFault_Handler</a><BR>
 <LI><a href="#[37]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">MemManage_Handler</a><BR>
 <LI><a href="#[38]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">BusFault_Handler</a><BR>
 <LI><a href="#[39]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">UsageFault_Handler</a><BR>
 <LI><a href="#[3a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">SVC_Handler</a><BR>
 <LI><a href="#[3b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">DebugMon_Handler</a><BR>
 <LI><a href="#[3c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">PendSV_Handler</a><BR>
 <LI><a href="#[7f]">ADC0_SEQA_DriverIRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">ADC0_SEQA_DriverIRQHandler</a><BR>
 <LI><a href="#[c2]">CLOCK_GetFlexCommClkFreq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b3]">CLOCK_GetFreq</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7f]">ADC0_SEQA_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[54]">ADC0_SEQA_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[80]">ADC0_SEQB_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[55]">ADC0_SEQB_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[81]">ADC0_THCMP_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[56]">ADC0_THCMP_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[38]">BusFault_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[73]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[48]">CTIMER0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[74]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER1_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[49]">CTIMER1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[8d]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER2_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[62]">CTIMER2_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[76]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER3_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[4b]">CTIMER3_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[8e]">CTIMER4_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER4_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[63]">CTIMER4_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[6a]">DMA0_DriverIRQHandler</a> from fsl_dma.o(i.DMA0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[3f]">DMA0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[82]">DMIC0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[57]">DMIC0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[93]">DbgConsole_Putchar</a> from fsl_debug_console.o(i.DbgConsole_Putchar) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[3b]">DebugMon_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[77]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[4c]">FLEXCOMM0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[78]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[4d]">FLEXCOMM1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[79]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[4e]">FLEXCOMM2_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[7a]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[4f]">FLEXCOMM3_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[7b]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[50]">FLEXCOMM4_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[7c]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[51]">FLEXCOMM5_IRQHandler</a> from smart_plc.o(i.FLEXCOMM5_IRQHandler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[7d]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[52]">FLEXCOMM6_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[7e]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[53]">FLEXCOMM7_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[6b]">GINT0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[40]">GINT0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[6c]">GINT1_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[41]">GINT1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[83]">HWVAD0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[58]">HWVAD0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[36]">HardFault_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[87]">IOH_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[5c]">IOH_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[88]">MAILBOX_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[5d]">MAILBOX_IRQHandler</a> from hello_world_core0.o(i.MAILBOX_IRQHandler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[72]">MRT0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[47]">MRT0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[37]">MemManage_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[35]">NMI_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[6d]">PIN_INT0_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[42]">PIN_INT0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[6e]">PIN_INT1_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT1_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[43]">PIN_INT1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[6f]">PIN_INT2_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT2_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[44]">PIN_INT2_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[70]">PIN_INT3_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT3_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[45]">PIN_INT3_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[89]">PIN_INT4_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT4_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[5e]">PIN_INT4_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[8a]">PIN_INT5_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT5_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[5f]">PIN_INT5_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[8b]">PIN_INT6_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT6_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[60]">PIN_INT6_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[8c]">PIN_INT7_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT7_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[61]">PIN_INT7_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3c]">PendSV_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[86]">RTC_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[5b]">RTC_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[8f]">Reserved54_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[64]">Reserved54_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[34]">Reset_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[75]">SCT0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[4a]">SCT0_IRQHandler</a> from fsl_sctimer.o(i.SCT0_IRQHandler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[94]">SCTIMER_EventHandleIRQ</a> from fsl_sctimer.o(i.SCTIMER_EventHandleIRQ) referenced from fsl_sctimer.o(i.SCTIMER_Init)
 <LI><a href="#[90]">SPIFI0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[65]">SPIFI0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3a]">SVC_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3d]">SysTick_Handler</a> from app_interrupt.o(i.SysTick_Handler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_lpc54114_cm4.o(i.SystemInit) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[92]">USART_ReadBlocking</a> from fsl_usart.o(i.USART_ReadBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[91]">USART_WriteBlocking</a> from fsl_usart.o(i.USART_WriteBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[85]">USB0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[5a]">USB0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[84]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[59]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[71]">UTICK0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[46]">UTICK0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[39]">UsageFault_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[69]">WDT_BOD_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[3e]">WDT_BOD_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[68]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[16]">chk_pwd</a> from protocol_smart.o(i.chk_pwd) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[96]">flash_transfer_cb</a> from app_spiflash.o(i.flash_transfer_cb) referenced from app_spiflash.o(i.spiflash_init)
 <LI><a href="#[10]">frame_handle</a> from smart_plc.o(i.frame_handle) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[23]">get_air_coner_switch</a> from protocol_smart.o(i.get_air_coner_switch) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[12]">get_app_comm_ver</a> from protocol_smart.o(i.get_app_comm_ver) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[2e]">get_dbg_info</a> from protocol_smart.o(i.get_dbg_info) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[14]">get_dev_key</a> from protocol_smart.o(i.get_dev_key) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[15]">get_dev_sn</a> from protocol_smart.o(i.get_dev_sn) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[13]">get_dev_soft_ver</a> from protocol_smart.o(i.get_dev_soft_ver) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[11]">get_device_type</a> from protocol_smart.o(i.get_device_type) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[1d]">get_low_temp_protect</a> from protocol_smart.o(i.get_low_temp_protect) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[21]">get_mode_ctrl</a> from protocol_smart.o(i.get_mode_ctrl) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[25]">get_panel_lock</a> from protocol_smart.o(i.get_panel_lock) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[2c]">get_power_on_delay_time</a> from protocol_smart.o(i.get_power_on_delay_time) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[2a]">get_report_freq</a> from protocol_smart.o(i.get_report_freq) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[28]">get_report_step</a> from protocol_smart.o(i.get_report_step) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[17]">get_report_switch</a> from protocol_smart.o(i.get_report_switch) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[27]">get_sensor_value</a> from protocol_smart.o(i.get_sensor_value) referenced 4 times from protocol_smart.o(.data)
 <LI><a href="#[32]">get_speed_ctrl_mode</a> from protocol_smart.o(i.get_speed_ctrl_mode) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[1b]">get_temp_range</a> from protocol_smart.o(i.get_temp_range) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[19]">get_temp_set</a> from protocol_smart.o(i.get_temp_set) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[30]">get_temp_set_E002</a> from protocol_smart.o(i.get_temp_set_E002) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[1f]">get_win_speed_ctrl</a> from protocol_smart.o(i.get_win_speed_ctrl) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[66]">main</a> from hello_world_core0.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[9d]">mcmgr_get_core_property_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_get_core_property_lpc54114) referenced 2 times from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[9e]">mcmgr_get_current_core_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_get_current_core_lpc54114) referenced from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[9a]">mcmgr_get_startup_data_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_get_startup_data_lpc54114) referenced 2 times from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[97]">mcmgr_init_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_init_lpc54114) referenced 2 times from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[98]">mcmgr_load_app_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_load_app_lpc54114) referenced 2 times from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[9b]">mcmgr_signal_ready_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_signal_ready_lpc54114) referenced 2 times from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[99]">mcmgr_start_core_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_start_core_lpc54114) referenced 2 times from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[9c]">mcmgr_stop_core_lpc54114</a> from mcmgr_internal_core_api_lpc54114.o(i.mcmgr_stop_core_lpc54114) referenced 2 times from mcmgr_internal_core_api_lpc54114.o(.constdata)
 <LI><a href="#[0]">on_uart_rxchar</a> from app_dev_ctrl.o(i.on_uart_rxchar) referenced 2 times from app_dev_ctrl.o(.data)
 <LI><a href="#[95]">pint_intr_callback</a> from app_key.o(i.pint_intr_callback) referenced from app_key.o(i.key_init)
 <LI><a href="#[e]">rd_gw_aid</a> from smart_plc.o(i.rd_gw_aid) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[8]">rd_plc_eid</a> from smart_plc.o(i.rd_plc_eid) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[f]">rd_plc_sid</a> from smart_plc.o(i.rd_plc_sid) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[7]">reset_plc</a> from smart_plc.o(i.reset_plc) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[24]">set_air_coner_switch</a> from protocol_smart.o(i.set_air_coner_switch) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[2f]">set_dbg_info</a> from protocol_smart.o(i.set_dbg_info) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[1e]">set_low_temp_protect</a> from protocol_smart.o(i.set_low_temp_protect) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[22]">set_mode_ctrl</a> from protocol_smart.o(i.set_mode_ctrl) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[26]">set_panel_lock</a> from protocol_smart.o(i.set_panel_lock) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[2d]">set_power_on_delay_time</a> from protocol_smart.o(i.set_power_on_delay_time) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[c]">set_register</a> from smart_plc.o(i.set_register) referenced 4 times from smart_plc.o(.data)
 <LI><a href="#[2b]">set_report_freq</a> from protocol_smart.o(i.set_report_freq) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[29]">set_report_step</a> from protocol_smart.o(i.set_report_step) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[18]">set_report_switch</a> from protocol_smart.o(i.set_report_switch) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[33]">set_speed_ctrl_mode</a> from protocol_smart.o(i.set_speed_ctrl_mode) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[1c]">set_temp_range</a> from protocol_smart.o(i.set_temp_range) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[1a]">set_temp_set</a> from protocol_smart.o(i.set_temp_set) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[31]">set_temp_set_E002</a> from protocol_smart.o(i.set_temp_set_E002) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[a]">set_unlink</a> from smart_plc.o(i.set_unlink) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[20]">set_win_speed_ctrl</a> from protocol_smart.o(i.set_win_speed_ctrl) referenced 2 times from protocol_smart.o(.data)
 <LI><a href="#[6]">state_machine</a> from app_dev_ctrl.o(i.state_machine) referenced 2 times from app_dev_ctrl.o(.data)
 <LI><a href="#[1]">sys_tick</a> from app_dev_ctrl.o(i.sys_tick) referenced 2 times from app_dev_ctrl.o(.data)
 <LI><a href="#[3]">task_100ms</a> from app_dev_ctrl.o(i.task_100ms) referenced 2 times from app_dev_ctrl.o(.data)
 <LI><a href="#[2]">task_20ms</a> from app_dev_ctrl.o(i.task_20ms) referenced 2 times from app_dev_ctrl.o(.data)
 <LI><a href="#[5]">task_key</a> from app_dev_ctrl.o(i.task_key) referenced 2 times from app_dev_ctrl.o(.data)
 <LI><a href="#[4]">task_sec</a> from app_dev_ctrl.o(i.task_sec) referenced 2 times from app_dev_ctrl.o(.data)
 <LI><a href="#[b]">wait_sec</a> from smart_plc.o(i.wait_sec) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[9]">wr_plc_aid</a> from smart_plc.o(i.wr_plc_aid) referenced 2 times from smart_plc.o(.data)
 <LI><a href="#[d]">wr_plc_panid</a> from smart_plc.o(i.wr_plc_panid) referenced 2 times from smart_plc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[9f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1b6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1b7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1b8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1b9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[34]"></a>Reset_Handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ADC0_SEQA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ADC0_SEQB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ADC0_THCMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMIC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>HWVAD0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IOH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPIFI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>ADC0_SEQA_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_SEQA_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_SEQA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>ADC0_SEQB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>ADC0_THCMP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>DMIC0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>HWVAD0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>IOH_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>MAILBOX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>Reserved54_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>SPIFI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[1ba]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_chn_bytes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_intype_body
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dev_soft_ver
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_body
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_comm_ver
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn_bytes
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_rxchar
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dev_soft_ver
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_comm_ver
</UL>

<P><STRONG><a name="[1bd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_report
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_eid
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_gw_aid
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_report_or_not
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_pwd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_frame_ack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_frame_opt
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>BOARD_BootClockFROHF48M</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockFROHF48M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_BootClockFROHF48M &rArr; CLOCK_AttachClk
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>BOARD_InitPins_Core0</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitPins_Core0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_InitPins_Core0 &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>CLOCK_AttachClk</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF48M
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_config
</UL>

<P><STRONG><a name="[b9]"></a>CLOCK_GetAsyncApbClkFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAsyncApbClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_GetAsyncApbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[ba]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fsl_clock.o(i.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAsyncApbClkFreq
</UL>

<P><STRONG><a name="[bc]"></a>CLOCK_GetExtClkFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetExtClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[c1]"></a>CLOCK_GetFRGInputClock</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, fsl_clock.o(i.CLOCK_GetFRGInputClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetFRGInputClock &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_GetFlexCommClkFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFlexCommClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = CLOCK_GetFlexCommClkFreq &rArr;  CLOCK_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b3]"></a>CLOCK_GetFreq</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAsyncApbClkFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_config
</UL>

<P><STRONG><a name="[bb]"></a>CLOCK_GetFro12MFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetFro12MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[be]"></a>CLOCK_GetFroHfFreq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetFroHfFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_GetI2SMClkFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetI2SMClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
</UL>

<P><STRONG><a name="[c0]"></a>CLOCK_GetOsc32KFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOsc32KFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[bf]"></a>CLOCK_GetPllOutFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetPllOutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_GetWdtOscFreq</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetWdtOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[b0]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetClkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF48M
</UL>

<P><STRONG><a name="[ae]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetFLASHAccessCyclesForFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF48M
</UL>

<P><STRONG><a name="[af]"></a>CLOCK_SetupFROClocking</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_SetupFROClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetupFROClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF48M
</UL>

<P><STRONG><a name="[73]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER4_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fsl_ctimer.o(i.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER4_DriverIRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, fsl_dma.o(i.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DbgConsole_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = DbgConsole_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[ca]"></a>DbgConsole_Printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_si7020_data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_rxchar
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_panid
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_aid
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_sec
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_unlink
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_panid
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aid
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_plc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_eid
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_gw_aid
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reg
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_handle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_unlink
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_plc_register
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sole_encode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint_intr_callback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_report
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_fre_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_new_report_or_not
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_need_report_or_not
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_actor_count
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_subs_infor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_time_hook
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_frame_ack
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ack_opt
</UL>

<P><STRONG><a name="[93]"></a>DbgConsole_Putchar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_debug_console.o(i.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[77]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smart_plc.o(i.FLEXCOMM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLEXCOMM5_IRQHandler &rArr; uart_push_rx &rArr; put_chn_bytes &rArr; alloc_a_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_hook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_push_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[d2]"></a>FLEXCOMM_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[d3]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCOMM_SetPeriph &rArr; FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[119]"></a>I2C_MasterGetDefaultConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterGetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796Init
</UL>

<P><STRONG><a name="[d5]"></a>I2C_MasterInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_i2c.o(i.I2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = I2C_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSetBaudRate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796Init
</UL>

<P><STRONG><a name="[d7]"></a>I2C_MasterSetBaudRate</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fsl_i2c.o(i.I2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MasterSetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[d8]"></a>I2C_MasterStart</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_i2c.o(i.I2C_MasterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MasterStart &rArr; I2C_PendingStatusWait
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796WriteByte
</UL>

<P><STRONG><a name="[da]"></a>I2C_MasterWriteBlocking</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, fsl_i2c.o(i.I2C_MasterWriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796WriteByte
</UL>

<P><STRONG><a name="[15f]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, fsl_inputmux.o(i.INPUTMUX_AttachSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = INPUTMUX_AttachSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[160]"></a>INPUTMUX_Deinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_inputmux.o(i.INPUTMUX_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INPUTMUX_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[15e]"></a>INPUTMUX_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_inputmux.o(i.INPUTMUX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INPUTMUX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[5d]"></a>MAILBOX_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, hello_world_core0.o(i.MAILBOX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MAILBOX_IRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>MCMGR_GetCurrentCore</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcmgr.o(i.MCMGR_GetCurrentCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCMGR_GetCurrentCore
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCMGR_Init
</UL>

<P><STRONG><a name="[dc]"></a>MCMGR_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mcmgr.o(i.MCMGR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCMGR_Init &rArr; MCMGR_GetCurrentCore
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCMGR_GetCurrentCore
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>MCMGR_StartCore</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mcmgr.o(i.MCMGR_StartCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCMGR_StartCore
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>PINT_EnableCallback</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fsl_pint.o(i.PINT_EnableCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PINT_EnableCallback &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[e1]"></a>PINT_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fsl_pint.o(i.PINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[e3]"></a>PINT_PatternMatchResetDetectLogic</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_pint.o(i.PINT_PatternMatchResetDetectLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>PINT_PinInterruptConfig</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_pint.o(i.PINT_PinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PINT_PinInterruptConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[6d]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT0_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT1_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT2_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT3_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT4_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>PIN_INT5_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT5_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>PIN_INT6_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT6_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>PIN_INT7_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT7_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, fsl_power_lib.o(i.POWER_SetVoltageForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_SetVoltageForFreq &rArr; POWER_setVdLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_setVdLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF48M
</UL>

<P><STRONG><a name="[e5]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_reset.o(i.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[b2]"></a>RESET_PeripheralReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_reset.o(i.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_config
</UL>

<P><STRONG><a name="[e6]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_reset.o(i.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[4a]"></a>SCT0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_sctimer.o(i.SCT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>SCTIMER_CreateAndScheduleEvent</STRONG> (Thumb, 456 bytes, Stack size 28 bytes, fsl_sctimer.o(i.SCTIMER_CreateAndScheduleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCTIMER_CreateAndScheduleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupPwm
</UL>

<P><STRONG><a name="[94]"></a>SCTIMER_EventHandleIRQ</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fsl_sctimer.o(i.SCTIMER_EventHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCTIMER_EventHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sctimer.o(i.SCTIMER_Init)
</UL>
<P><STRONG><a name="[e7]"></a>SCTIMER_GetDefaultConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_sctimer.o(i.SCTIMER_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SCTIMER_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
</UL>

<P><STRONG><a name="[e9]"></a>SCTIMER_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, fsl_sctimer.o(i.SCTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SCTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
</UL>

<P><STRONG><a name="[ea]"></a>SCTIMER_SetupPwm</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, fsl_sctimer.o(i.SCTIMER_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SCTIMER_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_CreateAndScheduleEvent
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupOutputSetAction
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupOutputClearAction
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
</UL>

<P><STRONG><a name="[ee]"></a>SPI_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_spi.o(i.SPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTransferBlocking
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[ef]"></a>SPI_MasterGetDefaultConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_spi.o(i.SPI_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SPI_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[f0]"></a>SPI_MasterInit</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, fsl_spi.o(i.SPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[f1]"></a>SPI_MasterSetBaud</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fsl_spi.o(i.SPI_MasterSetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = SPI_MasterSetBaud &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[f3]"></a>SPI_MasterTransferBlocking</STRONG> (Thumb, 510 bytes, Stack size 56 bytes, fsl_spi.o(i.SPI_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_transfer_cb
</UL>

<P><STRONG><a name="[3d]"></a>SysTick_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app_interrupt.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_lpc54114_cm4.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>USART5_InitPins</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pin_mux.o(i.USART5_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART5_InitPins &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_init
</UL>

<P><STRONG><a name="[c8]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_config
</UL>

<P><STRONG><a name="[c9]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_config
</UL>

<P><STRONG><a name="[92]"></a>USART_ReadBlocking</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[f5]"></a>USART_SetBaudRate</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, fsl_usart.o(i.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[91]"></a>USART_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[b5]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_common.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBlocking
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_si7020_data
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_IRQHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTransferBlocking
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterGetDefaultConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteBlocking
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupPwm
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetDefaultConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetInstance
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmgr_start_core_lpc54114
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmgr_get_startup_data_lpc54114
</UL>

<P><STRONG><a name="[1c7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1c8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f9]"></a>add_temp_handle</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.add_temp_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = add_temp_handle &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[16e]"></a>app_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_dev_ctrl.o(i.app_init))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>auto_report_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, auto_report.o(i.auto_report_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = auto_report_init &rArr; get_min_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensor_data
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_relay_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alarm_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_min_freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alloter_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_different_delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[102]"></a>auto_report_sec_task</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, auto_report.o(i.auto_report_sec_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1348<LI>Call Chain = auto_report_sec_task &rArr; send_fixed_len_count &rArr; send_to_only_gateway &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_len_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_fre_count
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_alarm_count
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_actor_count
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_time_hook
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_time_count
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron_time_count
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_process
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sec
</UL>

<P><STRONG><a name="[10b]"></a>auto_speed_display</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.auto_speed_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = auto_speed_display &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_sig_display
</UL>

<P><STRONG><a name="[10e]"></a>backlight_ctrl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.backlight_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = backlight_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backligt_on
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backlight_off
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[111]"></a>backlight_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_lcd.o(i.backlight_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = backlight_init &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>backlight_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_lcd.o(i.backlight_off))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_off_handle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backlight_ctrl
</UL>

<P><STRONG><a name="[10f]"></a>backligt_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_lcd.o(i.backligt_on))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backlight_ctrl
</UL>

<P><STRONG><a name="[18d]"></a>bcd2hex</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, utils.o(i.bcd2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bcd2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_finish_refresh_infor
</UL>

<P><STRONG><a name="[113]"></a>beep_ctrl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.beep_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = beep_ctrl &rArr; beep_off &rArr; SCTIMER_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[115]"></a>beep_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_beep.o(i.beep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = beep_init &rArr; SCTIMER_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupPwm
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetDefaultConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>beep_off</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_beep.o(i.beep_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = beep_off &rArr; SCTIMER_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupPwm
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetDefaultConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_ctrl
</UL>

<P><STRONG><a name="[117]"></a>beep_on</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_beep.o(i.beep_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = beep_on &rArr; SCTIMER_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupPwm
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetDefaultConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[118]"></a>bu9796Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_lcd.o(i.bu9796Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = bu9796Init &rArr; I2C_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>bu9796WriteByte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_lcd.o(i.bu9796WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = bu9796WriteByte &rArr; I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteBlocking
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdReload
</UL>

<P><STRONG><a name="[132]"></a>buffer2buff</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_lcd.o(i.buffer2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buffer2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_20ms
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_group_sig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fix_signal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_group_sig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_signal
</UL>

<P><STRONG><a name="[120]"></a>check_alive</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.check_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = check_alive &rArr; check_alive0 &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive0
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sec
</UL>

<P><STRONG><a name="[121]"></a>check_alive0</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_dev_ctrl.o(i.check_alive0))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268<LI>Call Chain = check_alive0 &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_local_frame
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive
</UL>

<P><STRONG><a name="[124]"></a>check_fixed_fre_data</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, auto_report.o(i.check_fixed_fre_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = check_fixed_fre_data &rArr; get_report_data_callback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_chn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_report
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_subs
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_process
</UL>

<P><STRONG><a name="[127]"></a>check_fixed_len_data</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, auto_report.o(i.check_fixed_len_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = check_fixed_len_data &rArr; sensor_need_report_or_not &rArr; start_new_report_or_not &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_chn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_need_report_or_not
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_subs
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_process
</UL>

<P><STRONG><a name="[13a]"></a>checksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utils.o(i.checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_smart_frame
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ret_frame
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>

<P><STRONG><a name="[12b]"></a>chg_state</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, smart_plc.o(i.chg_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chg_state
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plc_state
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_panid
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_sec
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_plc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_eid
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_gw_aid
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_frame_opt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ack_opt
</UL>

<P><STRONG><a name="[126]"></a>clear_chn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, auto_report.o(i.clear_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clear_chn &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_len_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_fre_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_power_on_report
</UL>

<P><STRONG><a name="[189]"></a>clear_equipment_gid_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, auto_report.o(i.clear_equipment_gid_flag))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_frame_opt
</UL>

<P><STRONG><a name="[162]"></a>clear_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_key.o(i.clear_iss))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[12f]"></a>clear_uart</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, smart_plc.o(i.clear_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clear_uart &rArr; empty_a_chn_slot &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_a_chn_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_rxchar
</UL>

<P><STRONG><a name="[131]"></a>clr_display_group_sig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_lcd.o(i.clr_display_group_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = clr_display_group_sig &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[10d]"></a>clr_display_signal</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, app_lcd.o(i.clr_display_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clr_display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_speed_display
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_sig_display
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_sig_display
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_display_flash
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>

<P><STRONG><a name="[134]"></a>clr_num_display</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, app_lcd.o(i.clr_num_display))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_position_num
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_display_flash
</UL>

<P><STRONG><a name="[133]"></a>clr_position_num</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_lcd.o(i.clr_position_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clr_position_num
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_num_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[135]"></a>code_body</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, protocol_smart.o(i.code_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = code_body &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_intype_body
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
</UL>

<P><STRONG><a name="[138]"></a>code_frame</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, protocol_smart.o(i.code_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = code_frame &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_local_frame
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_retry
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
</UL>

<P><STRONG><a name="[13b]"></a>code_intype_body</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, auto_report_app.o(i.code_intype_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = code_intype_body &rArr; code_body &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_body
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
</UL>

<P><STRONG><a name="[122]"></a>code_local_frame</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, protocol_smart.o(i.code_local_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = code_local_frame &rArr; code_frame &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive0
</UL>

<P><STRONG><a name="[13c]"></a>dec_temp_handle</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.dec_temp_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dec_temp_handle &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[13d]"></a>dev_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.dev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dev_init &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_wren
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_wrdi
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_sector_erase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_param_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>dev_type_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_dev_ctrl.o(i.dev_type_get))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_type
</UL>

<P><STRONG><a name="[145]"></a>display_fix_signal</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app_lcd.o(i.display_fix_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = display_fix_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[146]"></a>display_group_sig</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, app_lcd.o(i.display_group_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = display_group_sig &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[10c]"></a>display_signal</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, app_lcd.o(i.display_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_speed_display
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_panid
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_sig_display
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_sig_display
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_display_flash
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>

<P><STRONG><a name="[147]"></a>do_cmd</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, protocol_smart.o(i.do_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = do_cmd &rArr; form_error_body &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_error_body
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_frame_opt
</UL>

<P><STRONG><a name="[96]"></a>flash_transfer_cb</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, app_spiflash.o(i.flash_transfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = flash_transfer_cb &rArr; SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTransferBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_spiflash.o(i.spiflash_init)
</UL>
<P><STRONG><a name="[15c]"></a>get_1byte_bit1_number</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, auto_report.o(i.get_1byte_bit1_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_1byte_bit1_number
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_gid_equal
</UL>

<P><STRONG><a name="[14e]"></a>get_chn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, auto_report.o(i.get_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_chn &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_power_on_report
</UL>

<P><STRONG><a name="[12e]"></a>get_chn_bytes</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, alloter.o(i.get_chn_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_a_slot
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_a_chn_slot
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pop_tx
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_chn
</UL>

<P><STRONG><a name="[169]"></a>get_core1_image_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hello_world_core0.o(i.get_core1_image_size))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>get_dev_soft_ver</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, protocol_smart.o(i.get_dev_soft_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_dev_soft_ver &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>get_device_type</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, protocol_smart.o(i.get_device_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_device_type
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_type_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[156]"></a>get_id</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, smart_plc.o(i.get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284<LI>Call Chain = get_id &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_eid
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_gw_aid
</UL>

<P><STRONG><a name="[fc]"></a>get_last_bit_seqno</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, alloter.o(i.get_last_bit_seqno))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_a_slot
</UL>

<P><STRONG><a name="[15b]"></a>get_le_val</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utils.o(i.get_le_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_le_val
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_freq
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_on_delay_time
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_gid_equal
</UL>

<P><STRONG><a name="[ff]"></a>get_min_freq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, auto_report.o(i.get_min_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_min_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_report
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_freq_infor
</UL>

<P><STRONG><a name="[149]"></a>get_option</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, protocol_smart.o(i.get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_option &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_parameter
</UL>

<P><STRONG><a name="[11e]"></a>get_report_data_callback</STRONG> (Thumb, 804 bytes, Stack size 32 bytes, auto_report_app.o(i.get_report_data_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = get_report_data_callback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_intype_body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_chn
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_chn
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_body
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_len_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_fre_data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alarm_data
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_actor_data
</UL>

<P><STRONG><a name="[18c]"></a>get_sensor_from_type</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, auto_report.o(i.get_sensor_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_finish_refresh_infor
</UL>

<P><STRONG><a name="[159]"></a>get_smart_frame</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, protocol_smart.o(i.get_smart_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_smart_frame &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_rxchar
</UL>

<P><STRONG><a name="[154]"></a>hex2bcd</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, utils.o(i.hex2bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hex2bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_set_E002
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_set
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_range
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_step
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dbg_info
</UL>

<P><STRONG><a name="[f8]"></a>init_alarm_data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, auto_report_app.o(i.init_alarm_data))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actor_alarm_data_init
</UL>

<P><STRONG><a name="[170]"></a>init_chn_pool_mgr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, alloter.o(i.init_chn_pool_mgr))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>init_relay_data</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, auto_report_app.o(i.init_relay_data))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actor_alarm_data_init
</UL>

<P><STRONG><a name="[fe]"></a>init_sensor_data</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, auto_report_app.o(i.init_sensor_data))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_process
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_freq_infor
</UL>

<P><STRONG><a name="[171]"></a>init_uart_infor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, smart_plc.o(i.init_uart_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_uart_infor
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>is_all_bcd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, utils.o(i.is_all_bcd))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_step
</UL>

<P><STRONG><a name="[12a]"></a>is_all_xx</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, utils.o(i.is_all_xx))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_handle
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sole_encode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_report_or_not
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report_frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_frame_opt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ack_opt
</UL>

<P><STRONG><a name="[15a]"></a>is_gid_equal</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, smart_plc.o(i.is_gid_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = is_gid_equal &rArr; get_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le_val
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_1byte_bit1_number
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_parameter
</UL>

<P><STRONG><a name="[15d]"></a>key_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_key.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = key_init &rArr; PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Deinit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>key_scan</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, app_key.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = key_scan &rArr; beep_on &rArr; SCTIMER_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_off_handle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_handle
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_temp_handle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_temp_handle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_iss
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_speed_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_20ms
</UL>

<P><STRONG><a name="[166]"></a>lcdReload</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_lcd.o(i.lcdReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lcdReload &rArr; bu9796WriteByte &rArr; I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_20ms
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[167]"></a>local_ack_opt</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, smart_plc.o(i.local_ack_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = local_ack_opt &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_xx
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_panid
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_aid
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_unlink
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register
</UL>

<P><STRONG><a name="[150]"></a>local_frame_opt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, smart_plc.o(i.local_frame_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = local_frame_opt &rArr; get_reg &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_handle
</UL>

<P><STRONG><a name="[66]"></a>main</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, hello_world_core0.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_handle
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realy_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_infor
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_chn_pool_mgr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backlight_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCMGR_StartCore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCMGR_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins_Core0
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF48M
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_core1_image_size
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[164]"></a>mode_handle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.mode_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mode_handle &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[175]"></a>mode_sig_display</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_lcd.o(i.mode_sig_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mode_sig_display &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[1a9]"></a>mx25r_cmd_rdid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_spiflash.o(i.mx25r_cmd_rdid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mx25r_cmd_rdid
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[176]"></a>mx25r_cmd_rdsr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_spiflash.o(i.mx25r_cmd_rdsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mx25r_cmd_rdsr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_sector_erase
</UL>

<P><STRONG><a name="[13e]"></a>mx25r_cmd_read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_spiflash.o(i.mx25r_cmd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mx25r_cmd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_gw_aid
</UL>

<P><STRONG><a name="[142]"></a>mx25r_cmd_sector_erase</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, app_spiflash.o(i.mx25r_cmd_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mx25r_cmd_sector_erase &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_rdsr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_wren
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>

<P><STRONG><a name="[144]"></a>mx25r_cmd_wrdi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_spiflash.o(i.mx25r_cmd_wrdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mx25r_cmd_wrdi
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>

<P><STRONG><a name="[141]"></a>mx25r_cmd_wren</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_spiflash.o(i.mx25r_cmd_wren))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mx25r_cmd_wren
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_sector_erase
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>

<P><STRONG><a name="[143]"></a>mx25r_cmd_write</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, app_spiflash.o(i.mx25r_cmd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_rdsr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_wren
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>

<P><STRONG><a name="[1a8]"></a>mx25r_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_spiflash.o(i.mx25r_init))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[1b1]"></a>num_display_ctrl</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, app_lcd.o(i.num_display_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = num_display_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_display_flash
</UL>

<P><STRONG><a name="[165]"></a>on_off_handle</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.on_off_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_off_handle &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_realy_ctrl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backlight_off
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[17b]"></a>peek_chn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, auto_report.o(i.peek_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = peek_chn &rArr; peek_chn_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_retry
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_frame_ack
</UL>

<P><STRONG><a name="[17c]"></a>peek_chn_bytes</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, alloter.o(i.peek_chn_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peek_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_peek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn
</UL>

<P><STRONG><a name="[95]"></a>pint_intr_callback</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, app_key.o(i.pint_intr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = pint_intr_callback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPinInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(i.key_init)
</UL>
<P><STRONG><a name="[16f]"></a>plc_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smart_plc.o(i.plc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = plc_init &rArr; uart5_config &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_InitPins
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_reset_init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>plc_machine_opt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, smart_plc.o(i.plc_machine_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plc_machine_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_rxchar
</UL>

<P><STRONG><a name="[17f]"></a>plc_reset_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, smart_plc.o(i.plc_reset_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plc_reset_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_init
</UL>

<P><STRONG><a name="[193]"></a>plc_reset_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smart_plc.o(i.plc_reset_off))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_plc
</UL>

<P><STRONG><a name="[194]"></a>plc_reset_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smart_plc.o(i.plc_reset_on))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_plc
</UL>

<P><STRONG><a name="[158]"></a>put_chn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, auto_report.o(i.put_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = put_chn &rArr; put_chn_bytes &rArr; alloc_a_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
</UL>

<P><STRONG><a name="[181]"></a>put_chn_bytes</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, alloter.o(i.put_chn_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_chn_bytes &rArr; alloc_a_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_a_slot
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_chn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_push_rx
</UL>

<P><STRONG><a name="[136]"></a>put_le_val</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utils.o(i.put_le_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = put_le_val
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_body
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_switch
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_win_speed_ctrl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_speed_ctrl_mode
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_switch
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_freq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_on_delay_time
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_panel_lock
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode_ctrl
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_temp_protect
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_air_coner_switch
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_error_body
</UL>

<P><STRONG><a name="[183]"></a>read_si7020_data</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hello_world_core0.o(i.read_si7020_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_si7020_data &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sec
</UL>

<P><STRONG><a name="[16d]"></a>realy_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app_realy.o(i.realy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = realy_init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realy_off
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>realy_off</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_realy.o(i.realy_off))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realy_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>

<P><STRONG><a name="[185]"></a>realy_on</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_realy.o(i.realy_on))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>

<P><STRONG><a name="[186]"></a>realy_toggle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_realy.o(i.realy_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>

<P><STRONG><a name="[182]"></a>register_report</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, auto_report.o(i.register_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = register_report
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
</UL>

<P><STRONG><a name="[178]"></a>relay_ctrl</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, app_realy.o(i.relay_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = relay_ctrl &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realy_toggle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realy_on
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realy_off
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_auto_ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_realy_ctrl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_off_handle
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_speed_ctrl_realy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_ctrl_realy
</UL>

<P><STRONG><a name="[187]"></a>reload_freq_infor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, auto_report.o(i.reload_freq_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reload_freq_infor &rArr; get_min_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensor_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_min_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_freq
</UL>

<P><STRONG><a name="[151]"></a>remote_frame_opt</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, smart_plc.o(i.remote_frame_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = remote_frame_opt &rArr; report_frame_ack &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_frame_ack
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_xx
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_equipment_gid_flag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_group_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_handle
</UL>

<P><STRONG><a name="[14f]"></a>report_finish_refresh_infor</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, auto_report_app.o(i.report_finish_refresh_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_finish_refresh_infor &rArr; bcd2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2hex
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_type
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_power_on_report
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_frame_ack
</UL>

<P><STRONG><a name="[188]"></a>report_frame_ack</STRONG> (Thumb, 112 bytes, Stack size 280 bytes, auto_report.o(i.report_frame_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = report_frame_ack &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_finish_refresh_infor
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_sub_from_seq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_frame_opt
</UL>

<P><STRONG><a name="[109]"></a>send_fixed_fre_count</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, auto_report.o(i.send_fixed_fre_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = send_fixed_fre_count &rArr; send_to_only_gateway &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[108]"></a>send_fixed_len_count</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, auto_report.o(i.send_fixed_len_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = send_fixed_len_count &rArr; send_to_only_gateway &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[14b]"></a>send_local_frame</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, smart_plc.o(i.send_local_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268<LI>Call Chain = send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_panid
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aid
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_unlink
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_plc_register
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id
</UL>

<P><STRONG><a name="[18a]"></a>set_group_parameter</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, smart_plc.o(i.set_group_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_group_parameter &rArr; is_gid_equal &rArr; get_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_gid_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_frame_opt
</UL>

<P><STRONG><a name="[152]"></a>set_ret_frame</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smart_plc.o(i.set_ret_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_ret_frame &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_handle
</UL>

<P><STRONG><a name="[177]"></a>speed_realy_ctrl</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.speed_realy_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = speed_realy_ctrl &rArr; relay_ctrl &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_auto_ctrl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_off_handle
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_speed_ctrl_realy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_ctrl_realy
</UL>

<P><STRONG><a name="[1a6]"></a>speed_sig_display</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_lcd.o(i.speed_sig_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = speed_sig_display &rArr; auto_speed_display &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_speed_display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
</UL>

<P><STRONG><a name="[16c]"></a>spiflash_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, app_spiflash.o(i.spiflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = spiflash_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterGetDefaultConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_rdid
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>stop_fixed_reporting</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, auto_report.o(i.stop_fixed_reporting))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
</UL>

<P><STRONG><a name="[192]"></a>stop_report_para</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, auto_report.o(i.stop_report_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stop_report_para &rArr; stop_report &rArr; clear_chn &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_time_hook
</UL>

<P><STRONG><a name="[172]"></a>system_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_init &rArr; chg_state
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>task_handle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_dev_ctrl.o(i.task_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>temp_auto_ctrl</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.temp_auto_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = temp_auto_ctrl &rArr; speed_realy_ctrl &rArr; relay_ctrl &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_realy_ctrl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_speed_ctrl_realy
</UL>

<P><STRONG><a name="[1ae]"></a>temp_ctrl_realy</STRONG> (Thumb, 748 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.temp_ctrl_realy))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = temp_ctrl_realy &rArr; win_speed_ctrl_realy &rArr; temp_auto_ctrl &rArr; speed_realy_ctrl &rArr; relay_ctrl &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_realy_ctrl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_speed_ctrl_realy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sec
</UL>

<P><STRONG><a name="[1ac]"></a>temp_display_flash</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, app_lcd.o(i.temp_display_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = temp_display_flash &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_num_display
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_display_ctrl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[140]"></a>temp_param_init</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, app_dev_ctrl.o(i.temp_param_init))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[17e]"></a>uart5_config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, smart_plc.o(i.uart5_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = uart5_config &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_init
</UL>

<P><STRONG><a name="[179]"></a>uart_peek</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, smart_plc.o(i.uart_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_peek &rArr; peek_chn_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_rxchar
</UL>

<P><STRONG><a name="[1b2]"></a>uart_pop_tx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, smart_plc.o(i.uart_pop_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_pop_tx &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[cf]"></a>uart_push_rx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, smart_plc.o(i.uart_push_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_push_rx &rArr; put_chn_bytes &rArr; alloc_a_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>uart_rx_hook</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, smart_plc.o(i.uart_rx_hook))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>uart_tick_hook</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, smart_plc.o(i.uart_tick_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_tick_hook &rArr; empty_a_chn_slot &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_a_chn_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[123]"></a>uart_write</STRONG> (Thumb, 92 bytes, Stack size 1048 bytes, app_dev_ctrl.o(i.uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252<LI>Call Chain = uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pop_tx
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive0
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_handle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_report
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>

<P><STRONG><a name="[19b]"></a>uart_write_report</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, auto_report_app.o(i.uart_write_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268<LI>Call Chain = uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_retry
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report_frame
</UL>

<P><STRONG><a name="[1ab]"></a>update_lcd_data</STRONG> (Thumb, 534 bytes, Stack size 8 bytes, app_lcd.o(i.update_lcd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = update_lcd_data &rArr; speed_sig_display &rArr; auto_speed_display &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_sig_display
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_sig_display
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_group_sig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_fix_signal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_position_num
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display_group_sig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_display_ctrl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[1b0]"></a>win_speed_ctrl_realy</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.win_speed_ctrl_realy))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = win_speed_ctrl_realy &rArr; temp_auto_ctrl &rArr; speed_realy_ctrl &rArr; relay_ctrl &rArr; display_signal &rArr; buffer2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_auto_ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_realy_ctrl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_ctrl_realy
</UL>

<P><STRONG><a name="[163]"></a>win_speed_handle</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.win_speed_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = win_speed_handle &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[fa]"></a>write_to_flash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_wren
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_wrdi
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_sector_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_off_handle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_handle
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_temp_handle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_temp_handle
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_sid
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_gw_aid
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_speed_handle
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win_speed_ctrl
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_set_E002
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_set
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_range
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_ctrl_mode
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_switch
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_step
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_freq
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_panel_lock
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_ctrl
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_temp_protect
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_air_coner_switch
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_frame_opt
</UL>

<P><STRONG><a name="[1a3]"></a>xbcd2hex</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, utils.o(i.xbcd2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xbcd2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_set_E002
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_set
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_range
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_step
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dbg_info
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[168]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hello_world_core0.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_SetFLASHAccessCycles</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetFLASHAccessCycles))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
</UL>

<P><STRONG><a name="[c5]"></a>POWER_DisablePD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(i.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
</UL>

<P><STRONG><a name="[db]"></a>I2C_MasterClearStatusFlags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>

<P><STRONG><a name="[d6]"></a>I2C_MasterEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[d9]"></a>I2C_PendingStatusWait</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_i2c.o(i.I2C_PendingStatusWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_PendingStatusWait
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteBlocking
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
</UL>

<P><STRONG><a name="[f2]"></a>SPI_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[df]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_pint.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
</UL>

<P><STRONG><a name="[e0]"></a>PINT_PinInterruptClrStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_pint.o(i.PINT_PinInterruptClrStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
</UL>

<P><STRONG><a name="[c7]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(i.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>SCTIMER_GetInstance</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_sctimer.o(i.SCTIMER_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SCTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
</UL>

<P><STRONG><a name="[ed]"></a>SCTIMER_SetupOutputClearAction</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sctimer.o(i.SCTIMER_SetupOutputClearAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCTIMER_SetupOutputClearAction
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupPwm
</UL>

<P><STRONG><a name="[ec]"></a>SCTIMER_SetupOutputSetAction</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_sctimer.o(i.SCTIMER_SetupOutputSetAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCTIMER_SetupOutputSetAction
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_SetupPwm
</UL>

<P><STRONG><a name="[b7]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins_Core0
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_InitPins
</UL>

<P><STRONG><a name="[b8]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pin_mux.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins_Core0
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_InitPins
</UL>

<P><STRONG><a name="[ab]"></a>POWER_DisablePD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_config.o(i.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF48M
</UL>

<P><STRONG><a name="[174]"></a>MAILBOX_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mcmgr_internal_core_api_lpc54114.o(i.MAILBOX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAILBOX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcmgr_init_lpc54114
</UL>

<P><STRONG><a name="[9d]"></a>mcmgr_get_core_property_lpc54114</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_get_core_property_lpc54114))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcmgr_get_core_property_lpc54114
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>mcmgr_get_current_core_lpc54114</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_get_current_core_lpc54114))
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>mcmgr_get_startup_data_lpc54114</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_get_startup_data_lpc54114))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = mcmgr_get_startup_data_lpc54114 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>mcmgr_init_lpc54114</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_init_lpc54114))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcmgr_init_lpc54114 &rArr; MAILBOX_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>mcmgr_load_app_lpc54114</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_load_app_lpc54114))
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>mcmgr_signal_ready_lpc54114</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_signal_ready_lpc54114))
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>mcmgr_start_core_lpc54114</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_start_core_lpc54114))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = mcmgr_start_core_lpc54114 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>mcmgr_stop_core_lpc54114</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mcmgr_internal_core_api_lpc54114.o(i.mcmgr_stop_core_lpc54114))
<BR>[Address Reference Count : 1]<UL><LI> mcmgr_internal_core_api_lpc54114.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 168 bytes, Stack size 36 bytes, fsl_debug_console.o(i.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[cb]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 570 bytes, Stack size 120 bytes, fsl_debug_console.o(i.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[cd]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[0]"></a>on_uart_rxchar</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, app_dev_ctrl.o(i.on_uart_rxchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = on_uart_rxchar &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_peek
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_machine_opt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_smart_frame
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_uart
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dev_ctrl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>state_machine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_machine &rArr; plc_machine_opt
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_machine_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dev_ctrl.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>sys_tick</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, app_dev_ctrl.o(i.sys_tick))
<BR>[Address Reference Count : 1]<UL><LI> app_dev_ctrl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>task_100ms</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.task_100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = task_100ms &rArr; beep_ctrl &rArr; beep_off &rArr; SCTIMER_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_ctrl
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backlight_ctrl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lcd_data
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tick_hook
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_display_flash
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdReload
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dev_ctrl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>task_20ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.task_20ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = task_20ms &rArr; lcdReload &rArr; bu9796WriteByte &rArr; I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdReload
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dev_ctrl.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>task_key</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dev_ctrl.o(i.task_key))
<BR>[Address Reference Count : 1]<UL><LI> app_dev_ctrl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>task_sec</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, app_dev_ctrl.o(i.task_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356<LI>Call Chain = task_sec &rArr; auto_report_sec_task &rArr; send_fixed_len_count &rArr; send_to_only_gateway &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_si7020_data
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_ctrl_realy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dev_ctrl.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_lcd.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bu9796Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backlight_init
</UL>

<P><STRONG><a name="[1a7]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_spiflash.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_ReadPinInput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_key.o(i.GPIO_ReadPinInput))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint_intr_callback
</UL>

<P><STRONG><a name="[116]"></a>SCTIMER_StartTimer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_beep.o(i.SCTIMER_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
</UL>

<P><STRONG><a name="[129]"></a>check_sole_encode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smart_plc.o(i.check_sole_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = check_sole_encode &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_xx
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_plc_eid
</UL>

<P><STRONG><a name="[14a]"></a>do_plc_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smart_plc.o(i.do_plc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284<LI>Call Chain = do_plc_register &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register
</UL>

<P><STRONG><a name="[14c]"></a>do_set_unlink</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, smart_plc.o(i.do_set_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = do_set_unlink &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_unlink
</UL>

<P><STRONG><a name="[130]"></a>empty_a_chn_slot</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, smart_plc.o(i.empty_a_chn_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = empty_a_chn_slot &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tick_hook
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_uart
</UL>

<P><STRONG><a name="[10]"></a>frame_handle</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, smart_plc.o(i.frame_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = frame_handle &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_xx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ret_frame
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_frame_opt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_frame_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>get_plc_state</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, smart_plc.o(i.get_plc_state))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
</UL>

<P><STRONG><a name="[157]"></a>get_reg</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, smart_plc.o(i.get_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = get_reg &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_frame_opt
</UL>

<P><STRONG><a name="[e]"></a>rd_gw_aid</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, smart_plc.o(i.rd_gw_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = rd_gw_aid &rArr; get_id &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>rd_plc_eid</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, smart_plc.o(i.rd_plc_eid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = rd_plc_eid &rArr; get_id &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sole_encode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>rd_plc_sid</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, smart_plc.o(i.rd_plc_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = rd_plc_sid &rArr; get_id &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx25r_cmd_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_report
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>reset_plc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, smart_plc.o(i.reset_plc))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = reset_plc &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_reset_on
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_reset_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[1a2]"></a>set_aid</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, smart_plc.o(i.set_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284<LI>Call Chain = set_aid &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_aid
</UL>

<P><STRONG><a name="[1a4]"></a>set_panid</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, smart_plc.o(i.set_panid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284<LI>Call Chain = set_panid &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_local_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_plc_panid
</UL>

<P><STRONG><a name="[c]"></a>set_register</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, smart_plc.o(i.set_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = set_register &rArr; do_plc_register &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_plc_register
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ack_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>set_unlink</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, smart_plc.o(i.set_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292<LI>Call Chain = set_unlink &rArr; do_set_unlink &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_unlink
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ack_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>wait_sec</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smart_plc.o(i.wait_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = wait_sec &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>wr_plc_aid</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, smart_plc.o(i.wr_plc_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = wr_plc_aid &rArr; set_aid &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ack_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>wr_plc_panid</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, smart_plc.o(i.wr_plc_panid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = wr_plc_panid &rArr; set_panid &rArr; send_local_frame &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_panid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_signal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_state
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ack_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_plc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>chk_pwd</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, protocol_smart.o(i.chk_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = chk_pwd &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>form_error_body</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, protocol_smart.o(i.form_error_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = form_error_body &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[23]"></a>get_air_coner_switch</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, protocol_smart.o(i.get_air_coner_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_air_coner_switch &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>get_app_comm_ver</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, protocol_smart.o(i.get_app_comm_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_app_comm_ver &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>get_dbg_info</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, protocol_smart.o(i.get_dbg_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_dbg_info &rArr; hex2bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>get_dev_key</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, protocol_smart.o(i.get_dev_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_dev_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>get_dev_sn</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, protocol_smart.o(i.get_dev_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_dev_sn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>get_low_temp_protect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, protocol_smart.o(i.get_low_temp_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_low_temp_protect &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>get_mode_ctrl</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, protocol_smart.o(i.get_mode_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_mode_ctrl &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>get_panel_lock</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, protocol_smart.o(i.get_panel_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_panel_lock &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>get_power_on_delay_time</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, protocol_smart.o(i.get_power_on_delay_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_power_on_delay_time &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>get_report_freq</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, protocol_smart.o(i.get_report_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_report_freq &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>get_report_step</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, protocol_smart.o(i.get_report_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_report_step &rArr; hex2bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>get_report_switch</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, protocol_smart.o(i.get_report_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_report_switch &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>get_sensor_value</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, protocol_smart.o(i.get_sensor_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_sensor_value &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>get_speed_ctrl_mode</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, protocol_smart.o(i.get_speed_ctrl_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_speed_ctrl_mode &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>get_temp_range</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, protocol_smart.o(i.get_temp_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_temp_range &rArr; hex2bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>get_temp_set</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, protocol_smart.o(i.get_temp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_temp_set &rArr; hex2bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>get_temp_set_E002</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, protocol_smart.o(i.get_temp_set_E002))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_temp_set_E002 &rArr; hex2bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>get_win_speed_ctrl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, protocol_smart.o(i.get_win_speed_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_win_speed_ctrl &rArr; put_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>set_air_coner_switch</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, protocol_smart.o(i.set_air_coner_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_air_coner_switch &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>set_dbg_info</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, protocol_smart.o(i.set_dbg_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_dbg_info &rArr; xbcd2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xbcd2hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>set_low_temp_protect</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, protocol_smart.o(i.set_low_temp_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_low_temp_protect &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>set_mode_ctrl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, protocol_smart.o(i.set_mode_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_mode_ctrl &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>set_panel_lock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, protocol_smart.o(i.set_panel_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_panel_lock &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>set_power_on_delay_time</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, protocol_smart.o(i.set_power_on_delay_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_power_on_delay_time &rArr; get_le_val
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>set_report_freq</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, protocol_smart.o(i.set_report_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_report_freq &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_freq_infor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>set_report_step</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, protocol_smart.o(i.set_report_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_report_step &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xbcd2hex
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>set_report_switch</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, protocol_smart.o(i.set_report_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_report_switch &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>set_speed_ctrl_mode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, protocol_smart.o(i.set_speed_ctrl_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_speed_ctrl_mode &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>set_temp_range</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, protocol_smart.o(i.set_temp_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_temp_range &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xbcd2hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>set_temp_set</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, protocol_smart.o(i.set_temp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_temp_set &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xbcd2hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>set_temp_set_E002</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, protocol_smart.o(i.set_temp_set_E002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_temp_set_E002 &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xbcd2hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>set_win_speed_ctrl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, protocol_smart.o(i.set_win_speed_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_win_speed_ctrl &rArr; write_to_flash &rArr; mx25r_cmd_write &rArr; mx25r_cmd_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_smart.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>actor_alarm_data_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, auto_report.o(i.actor_alarm_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = actor_alarm_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_relay_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alarm_data
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_time_count
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron_time_count
</UL>

<P><STRONG><a name="[11b]"></a>check_actor_data</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, auto_report.o(i.check_actor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = check_actor_data &rArr; get_report_data_callback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_report
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_process
</UL>

<P><STRONG><a name="[11f]"></a>check_alarm_data</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, auto_report.o(i.check_alarm_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = check_alarm_data &rArr; get_report_data_callback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_report
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_process
</UL>

<P><STRONG><a name="[125]"></a>clear_subs</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, auto_report.o(i.clear_subs))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_len_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_fre_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
</UL>

<P><STRONG><a name="[18e]"></a>find_sub_from_seq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, auto_report.o(i.find_sub_from_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_sub_from_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_frame_ack
</UL>

<P><STRONG><a name="[19c]"></a>find_sub_from_type</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, auto_report.o(i.find_sub_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_retry
</UL>

<P><STRONG><a name="[14d]"></a>finish_power_on_report</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, auto_report.o(i.finish_power_on_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = finish_power_on_report &rArr; get_chn &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_finish_refresh_infor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_chn
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_max_retry
</UL>

<P><STRONG><a name="[100]"></a>get_different_delay_time</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, auto_report.o(i.get_different_delay_time))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_init
</UL>

<P><STRONG><a name="[18f]"></a>get_time_from_trycnt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, auto_report.o(i.get_time_from_trycnt))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_time_hook
</UL>

<P><STRONG><a name="[104]"></a>judge_process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, auto_report.o(i.judge_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = judge_process &rArr; check_fixed_len_data &rArr; sensor_need_report_or_not &rArr; start_new_report_or_not &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensor_data
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_len_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_fre_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alarm_data
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_actor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[105]"></a>poweron_time_count</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, auto_report.o(i.poweron_time_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = poweron_time_count &rArr; send_power_or_register_report &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actor_alarm_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[106]"></a>register_time_count</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, auto_report.o(i.register_time_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = register_time_count &rArr; send_power_or_register_report &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actor_alarm_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[101]"></a>report_alloter_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, auto_report.o(i.report_alloter_init))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_init
</UL>

<P><STRONG><a name="[103]"></a>report_time_hook</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, auto_report.o(i.report_time_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316<LI>Call Chain = report_time_hook &rArr; send_retry &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report_para
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_retry
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_max_retry
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_from_trycnt
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[195]"></a>save_subs_infor</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, auto_report.o(i.save_subs_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = save_subs_infor &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report_frame
</UL>

<P><STRONG><a name="[107]"></a>send_actor_count</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, auto_report.o(i.send_actor_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = send_actor_count &rArr; send_to_only_gateway &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[10a]"></a>send_alarm_count</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, auto_report.o(i.send_alarm_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = send_alarm_count &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_report_sec_task
</UL>

<P><STRONG><a name="[190]"></a>send_max_retry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, auto_report.o(i.send_max_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_max_retry &rArr; finish_power_on_report &rArr; get_chn &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_power_on_report
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_time_hook
</UL>

<P><STRONG><a name="[19d]"></a>send_over</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, auto_report.o(i.send_over))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
</UL>

<P><STRONG><a name="[180]"></a>send_power_or_register_report</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, auto_report.o(i.send_power_or_register_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = send_power_or_register_report &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_data_callback
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report_frame
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_power_on_report
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_xx
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_time_count
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron_time_count
</UL>

<P><STRONG><a name="[19a]"></a>send_report_frame</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, auto_report.o(i.send_report_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292<LI>Call Chain = send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_report
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_subs_infor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_xx
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_or_register_report
</UL>

<P><STRONG><a name="[191]"></a>send_retry</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, auto_report.o(i.send_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = send_retry &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_report
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_sub_from_type
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_time_hook
</UL>

<P><STRONG><a name="[196]"></a>send_to_both_subs_gateway</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, auto_report.o(i.send_to_both_subs_gateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = send_to_both_subs_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_report_or_not
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report_frame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_over
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_len_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_fre_count
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_actor_count
</UL>

<P><STRONG><a name="[199]"></a>send_to_gateway</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, auto_report.o(i.send_to_gateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_report_or_not
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report_frame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_over
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_gateway
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_alarm_count
</UL>

<P><STRONG><a name="[197]"></a>send_to_only_gateway</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, auto_report.o(i.send_to_only_gateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = send_to_only_gateway &rArr; send_to_gateway &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_len_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_fre_count
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_actor_count
</UL>

<P><STRONG><a name="[198]"></a>send_to_only_subs</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, auto_report.o(i.send_to_only_subs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = send_to_only_subs &rArr; send_report_frame &rArr; uart_write_report &rArr; uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peek_chn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_report_or_not
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_report_frame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_over
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_len_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fixed_fre_count
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_actor_count
</UL>

<P><STRONG><a name="[128]"></a>sensor_need_report_or_not</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, auto_report.o(i.sensor_need_report_or_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = sensor_need_report_or_not &rArr; start_new_report_or_not &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_fixed_report_save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_new_report_or_not
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_fixed_report_save
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_len_data
</UL>

<P><STRONG><a name="[1a0]"></a>start_fixed_report_save</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, auto_report.o(i.start_fixed_report_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_fixed_report_save
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_need_report_or_not
</UL>

<P><STRONG><a name="[1a1]"></a>start_new_report_or_not</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, auto_report.o(i.start_new_report_or_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = start_new_report_or_not &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_need_report_or_not
</UL>

<P><STRONG><a name="[11d]"></a>start_report</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, auto_report.o(i.start_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_report &rArr; get_min_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_min_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_len_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_fre_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alarm_data
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_actor_data
</UL>

<P><STRONG><a name="[19f]"></a>stop_fixed_report_save</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, auto_report.o(i.stop_fixed_report_save))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_need_report_or_not
</UL>

<P><STRONG><a name="[11c]"></a>stop_report</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, auto_report.o(i.stop_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_report &rArr; clear_chn &rArr; get_chn_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_fixed_reporting
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_chn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_subs
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_report_para
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_len_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fixed_fre_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron_time_count
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_alarm_data
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_actor_data
</UL>

<P><STRONG><a name="[19e]"></a>sub_report_or_not</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, auto_report.o(i.sub_report_or_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sub_report_or_not &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_xx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_only_subs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_gateway
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_both_subs_gateway
</UL>

<P><STRONG><a name="[18b]"></a>get_sensor_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, auto_report_app.o(i.get_sensor_type))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_finish_refresh_infor
</UL>

<P><STRONG><a name="[fb]"></a>alloc_a_slot</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, alloter.o(i.alloc_a_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alloc_a_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_last_bit_seqno
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_chn_bytes
</UL>

<P><STRONG><a name="[153]"></a>free_a_slot</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, alloter.o(i.free_a_slot))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chn_bytes
</UL>

<P><STRONG><a name="[e4]"></a>POWER_setVdLevel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_power_lib.o(i.POWER_setVdLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_setVdLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
